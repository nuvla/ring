name: Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - '*'
      - '!master'
      - '!release-please-*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting for sonar
          fetch-depth: 0

      - uses: ./.github/actions/action-a
        id: setup_base
        with:
          INPUT_TXT: HelloWorld

      - name: Cache local M2 repository
        run: echo ${{ steps.setup_base.outputs.OUTPUT_TXT }}

      - name: Cache local M2 repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-lein-${{ hashFiles('**/project.clj') }}
          restore-keys: |
            ${{ runner.os }}-lein-
            - name: Cache local M2 repository

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Ubuntu Repos on Azure fail often. Attempt to install before other
      # long-running operations.
      - name: Install xmllinter (for "Fail on failed tests")
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Project version
        working-directory: code
        run: |
          VERSION=$( lein project-version )
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        id: project_version

      - name: Setup Sonar Scanner
        uses: warchant/setup-sonar-scanner@v7
        with:
          version: 4.6.2.2472

      - name: Run Sonar Scanner
        env:
          # provide GITHUB_TOKEN to get access to secrets.SONARQUBE_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: code
        run: sonar-scanner -Dsonar.token=${{ secrets.SONARQUBE_TOKEN }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.projectVersion=${{ steps.project_version.outputs.version }}

      - name: Get list of tests
        if: always()
        id: tests
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "code/test-reports"
          type: ".xml"

      - name: Fail on failed tests
        if: always()
        run: |
          echo "Found ${{ steps.tests.outputs.path_count }} test report(s)"
          if [[ ${{ steps.tests.outputs.path_count }} < 1 ]]; then
          echo "ERROR: No unit test reports collected."
          exit 1
          fi
          for f in ${{ steps.tests.outputs.paths }}; do
          echo "=== $f ==="
          if [[ $(xmllint --xpath "string(//testsuite/@failures)" $f) > 1 ]]; then
            echo TEST FAILED: $f
            exit 1
          fi
          if [[ $(xmllint --xpath "string(//testsuite/@errors)" $f) > 1 ]]; then
            echo TEST ERRORED: $f
            exit 1
          fi
          done

      - name: jq for SonarQube Quality Gate check
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        # Force to fail step after specific time
        timeout-minutes: 5
        with:
          scanMetadataReportFile: code/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: code/test-reports/TEST-*.xml

      - name: Deploy to clojars
        working-directory: code
        run: lein deploy clojars
        env:
          CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
          CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}

      - name: Build with lein
        working-directory: code
        run: |
          lein install
          lein libdir

      - name: Copy relevant files
        working-directory: code
        run: |
          mkdir -p ../container/target/dependency
          cp -r target/lib/ ../container/target/dependency/
          cp target/ring-$(lein project-version).jar ../container/target/dependency/lib/

      - name: Extract branch name and substitute slashes
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" | tr '/' '-' >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Build time
        run: echo "BUILD_TIME=$(date --utc +%FT%T.%3NZ)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.SIXSQ_DOCKER_USERNAME }}
          password: ${{ secrets.SIXSQ_DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./container
          file: container/Dockerfile
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            PACKAGE_TAG=${{ needs.trigger-release.outputs.tag_name }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
          push: true
          tags: >
            nuvladev/ring:${{ steps.extract_branch.outputs.branch }}

  notify:
    if: always()
    name: Post Workflow Status To Slack
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
